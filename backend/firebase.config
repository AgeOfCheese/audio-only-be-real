{
  "package.json": {
    "name": "stitch-firebase-functions",
    "version": "1.0.0",
    "description": "Firebase Cloud Functions for Stitch App",
    "main": "index.js",
    "dependencies": {
      "firebase-admin": "^12.0.0",
      "firebase-functions": "^4.0.0",
      "@google-cloud/speech": "^6.0.0",
      "@google-cloud/storage": "^7.0.0",
      "openai": "^4.0.0",
      "uuid": "^9.0.0"
    },
    "engines": {
      "node": "18"
    }
  },
  "firebase.json": {
    "functions": {
      "source": "functions",
      "runtime": "nodejs18"
    },
    "firestore": {
      "rules": "firestore.rules",
      "indexes": "firestore.indexes.json"
    },
    "storage": {
      "rules": "storage.rules"
    }
  },
  "firestore.rules": "rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Daily prompts are readable by all authenticated users\n    match /daily_prompts/{promptId} {\n      allow read: if request.auth != null;\n      allow write: if false; // Only cloud functions can write\n    }\n    \n    // Audio responses are write-only for users, read-only for cloud functions\n    match /audio_responses/{responseId} {\n      allow read: if false; // Only cloud functions can read\n      allow write: if false; // Only cloud functions can write\n    }\n    \n    // Moderation queue is admin-only\n    match /moderation_queue/{docId} {\n      allow read, write: if false; // Only cloud functions\n    }\n    \n    // Escalated responses are admin-only\n    match /escalated_responses/{docId} {\n      allow read, write: if false; // Only cloud functions\n    }\n  }\n}",
  "firestore.indexes.json": {\n    "indexes": [\n      {\n        "collectionGroup": "audio_responses",\n        "queryScope": "COLLECTION",\n        "fields": [\n          {\n            "fieldPath": "promptId",\n            "order": "ASCENDING"\n          },\n          {\n            "fieldPath": "createdAt",\n            "order": "DESCENDING"\n          }\n        ]\n      },\n      {\n        "collectionGroup": "daily_prompts",\n        "queryScope": "COLLECTION",\n        "fields": [\n          {\n            "fieldPath": "date",\n            "order": "ASCENDING"\n          },\n          {\n            "fieldPath": "expiresAt",\n            "order": "ASCENDING"\n          }\n        ]\n      }\n    ],\n    "fieldOverrides": []\n  },\n  "storage.rules": "rules_version = '2';\nservice firebase.storage {\n  match /b/{bucket}/o {\n    // Audio files are write-only for authenticated users\n    match /audio/{allPaths=**} {\n      allow read: if false;\n      allow write: if request.auth != null && request.resource.size < 5 * 1024 * 1024; // 5MB limit\n    }\n  }\n}",\n  ".env.example": "OPENAI_API_KEY=your_openai_api_key_here\nGOOGLE_APPLICATION_CREDENTIALS=path/to/service-account-key.json",\n  "README.md": "# Stitch Firebase Backend\\n\\n## Setup Instructions\\n\\n### 1. Install Firebase CLI\\n```bash\\nnpm install -g firebase-tools\\n```\\n\\n### 2. Login to Firebase\\n```bash\\nfirebase login\\n```\\n\\n### 3. Initialize Firebase Project\\n```bash\\nfirebase init\\n```\\nSelect:\\n- Functions\\n- Firestore\\n- Storage\\n\\n### 4. Configure Environment Variables\\n```bash\\nfirebase functions:config:set openai.key=\\"your_openai_api_key\\"\\n```\\n\\n### 5. Enable Required APIs\\nIn Google Cloud Console, enable:\\n- Cloud Speech-to-Text API\\n- Cloud Firestore API\\n- Cloud Storage API\\n- Cloud Functions API\\n\\n### 6. Deploy Functions\\n```bash\\ncd functions\\nnpm install\\nfirebase deploy --only functions\\n```\\n\\n### 7. Deploy Firestore Rules\\n```bash\\nfirebase deploy --only firestore:rules\\n```\\n\\n### 8. Deploy Storage Rules\\n```bash\\nfirebase deploy --only storage\\n```\\n\\n## API Endpoints\\n\\nAfter deployment, your functions will be available at:\\n- `https://us-central1-YOUR_PROJECT_ID.cloudfunctions.net/getCurrentPrompt`\\n- `https://us-central1-YOUR_PROJECT_ID.cloudfunctions.net/submitResponse`\\n- `https://us-central1-YOUR_PROJECT_ID.cloudfunctions.net/getRandomResponse`\\n- `https://us-central1-YOUR_PROJECT_ID.cloudfunctions.net/getCrisisResources`\\n- `https://us-central1-YOUR_PROJECT_ID.cloudfunctions.net/getStats`\\n\\n## Flutter Integration\\n\\nAdd these dependencies to your Flutter `pubspec.yaml`:\\n```yaml\\ndependencies:\\n  firebase_core: ^2.24.2\\n  cloud_firestore: ^4.13.6\\n  firebase_auth: ^4.15.3\\n  firebase_storage: ^11.6.0\\n  http: ^1.1.0\\n```\\n\\n## Security Notes\\n\\n- All audio processing happens server-side\\n- Content moderation is automatic\\n- Personal information is filtered out\\n- Crisis intervention is built-in\\n- Data expires after 24 hours\\n\\n## Monitoring\\n\\nUse Firebase Console to monitor:\\n- Function execution logs\\n- Firestore usage\\n- Storage usage\\n- Error rates\\n- Performance metrics"\n}\n